given this piece of form fields data which i get from the GetUserDataFormFields api:

10
: 
checkboxLabel
: 
"فاقد بیمه"
checkboxLabelEN
: 
"Don't have Insurance"
checkboxName
: 
"noInsurance"
enabled
: 
undefined
label
: 
"نوع بیمه"
labelEN
: 
"Insurance Type"
name
: 
"insuranceType"
options
: 
"بیمه سلامت,بیمه تامین اجتماعی"
optionsEN
: 
"insurance1,insurance2"
required
: 
false
type
: 
"select"


11
: 
checkboxLabel
: 
"فاقد بیمه تکمیلی"
checkboxLabelEN
: 
"Don't have Supplementary Insurance"
checkboxName
: 
"noSupplementaryInsurance"
enabled
: 
undefined
label
: 
"نوع بیمه تکمیلی"
labelEN
: 
"Supplementary Insurance Type"
name
: 
"supplementaryInsuranceType"
options
: 
"بیمه الف,بیمه ب"
optionsEN
: 
"supplementaryInsuranceType1,supplementaryInsuranceType2"
required
: 
false
type
: 
"select"

and given this GetUserDataFormFields api call:
useEffect(() => {
		axiosInstance
			.post("/api/User/GetUserDataFormFields") // API call for form data and validation
			.then((response) => {
				const data = response.data;

				const {
					formFieldsProps: newFormFields,
					validationSchemaData: newValidationSchemaData,
				} = processData(data);

				setFormFields(newFormFields);
				setValidationSchemaData(newValidationSchemaData);

				console.log(newFormFields);
				//console.log(newValidationSchemaData);
			})
			.catch((error) => {
				console.error("API request failed, trying local db.json", error);

				fetch("/db.json")
					.then((response) => response.json())
					.then((data) => {
						const {
							formFieldsProps: newFormFields,
							validationSchemaData: newValidationSchemaData,
						} = processData(data);

						setFormFields(newFormFields);
						setValidationSchemaData(newValidationSchemaData);

						console.log(newFormFields);
						console.log(newValidationSchemaData);
					})
					.catch((jsonError) => {
						console.error(
							"Failed to fetch data from both API and db.json",
							jsonError
						);
					});
			});
	}, []);

and given this api call to get the insurance data:
useEffect(() => {
		axiosInstance
			.post("/api/Admin/GetInsurances")
			.then((response) => {
				const data = response.data;
				setInsuranceData(data);
			})
			.catch((error) => {
				console.error("API request failed, trying local db.json", error);

				fetch("/db.json")
					.then((response) => response.json())
					.then((data) => {
						setInsuranceData(data);
					})
					.catch((jsonError) => {
						console.error(
							"Failed to fetch data from both API and db.json",
							jsonError
						);
					});
			});
	}, []);



which is then stores the data in insuranceData;

	const [insuranceData, setInsuranceData] = useState<insuranceDataProps[]>([]);

and given these structure of the insuranceData:
interface insuranceDataProps {
	id: number;
	companyName: string;
	companyNameEN: string;
	type: number;
	discountPercentage: number;
}


i need you to create a function that i can use before the part setFormFields(newFormFields); that store the formFields data;
so that i can replace the options and optionsEN of the insuranceType and supplementaryInsuranceType respectivly, with the data in the insuranceData, based of course on the type of the item;
by which i mean all the data with type = 0, should have their coresponding companyName and companyNameEN be placed in the options and optionsEN respectivly.

so to recap, create a function that i can call be for setting the formFields data, which this function replaces the options and optionsEN data in the items with the name = insuranceType and name = supplementaryInsuranceType respectivly;
