given this code:
import { useEffect, useState } from "react";
import { useLanguage } from "./LanguageContext";
import axiosInstance from "../myAPI/axiosInstance";

interface payloadProps {
	formFieldId: number;
	required: boolean;
	enabled: boolean;
}

interface formFieldsProps {
	id: number;
	name: string;
	type: string;
	required: boolean;
	enabled: boolean;

	group: string;
	groupEN: string;

	label: string;
	labelEN: string;
}

function AdminDashboardFormPageContent() {
	const { language } = useLanguage(); // Get language and toggle function from context
	const [dataUpdateFlag, setDataUpdateFlag] = useState(false);

	const [formFieldsData, setFormFieldsData] = useState<formFieldsProps[]>([]);
	const [formFieldsIEData, setFormFieldsIEData] = useState<formFieldsProps[]>(
		[]
	);

	
	const [changedData, setChangedData] = useState<payloadProps[]>([]);
	const [changedDataIE, setChangedDataIE] = useState<payloadProps[]>([]); 

	// fetch user information form fields
	useEffect(() => {
		axiosInstance
			.post("/api/User/GetUserInformationFormFields") // Call the API to get user data
			.then((response) => {
				const data = response.data;
				setFormFieldsIEData(data);
			})
			.catch((error) => {
				console.error(
					"API request for user data form fields failed, trying local db.json",
					error
				);

				// Fetch from local db.json if API fails
				fetch("/db.json")
					.then((response) => {
						if (!response.ok) {
							throw new Error(
								"Failed to fetch user data form fields from db.json"
							);
						}
						return response.json();
					})
					.then((data) => {
						// Update state for form fields
						setFormFieldsIEData(data.formFields);
					})
					.catch((jsonError) => {
						console.error(
							"Failed to fetch user data form fields from both API and db.json",
							jsonError
						);
					});
			});
	}, [dataUpdateFlag]);

	// Assuming that formData comes as a single structure from the API
	useEffect(() => {
		axiosInstance
			.post("/api/User/GetUserDataFormFields") // API call for form data and validation
			.then((response) => {
				const data = response.data;

				setFormFieldsData(data);

				//console.log(newFormFields);
				//console.log(newValidationSchemaData);
			})
			.catch((error) => {
				console.error("API request failed, trying local db.json", error);

				fetch("/db.json")
					.then((response) => response.json())
					.then((data) => {
						setFormFieldsData(data);
					})
					.catch((jsonError) => {
						console.error(
							"Failed to fetch data from both API and db.json",
							jsonError
						);
					});
			});
	}, [dataUpdateFlag]);

	const handleChange = () => {};

	const handleSubmit = async () => {
		const payload = {
			formFieldsData: changedData,
			formFieldsIEData: changedDataIE,
		};

		try {
			// Send the data to the API
			await axiosInstance.post("/api/Admin/UpdateFormFields", payload);
			console.log("Data submitted successfully");
		} catch (error) {
			console.error("Error submitting data:", error);
		}
		setDataUpdateFlag((prev) => !prev);
	};

	const handleCancel = () => {
		setDataUpdateFlag((prev) => !prev);
	};

	return (
		<div className="container custom-bg-4 shadow rounded-5 p-3 mb-4 mb-md-5">
			{/* User Information Form */}
			<div
				className={`d-flex flex-column bg-white shadow text-${
					language === "fa" ? "end" : "start"
				} rounded-5 m-3 m-md-4 m-lg-5`}
			>
				<div className="d-flex justify-content-center align-items-center custom-bg-1 shadow rounded-5 mb-4 p-3">
					<h3 className="text-center text-white m-0">
						{language === "fa" ? "فرم اطلاعات کاربر" : "User Information Form"}
					</h3>
				</div>
				<div
					className={`row row-cols-2 mt-1 mb-5`}
					style={{ direction: language === "fa" ? "rtl" : "ltr" }}
				>
					{formFieldsData.map((field, index) => {
						return (
							<div key={index} className="col-6 d-flex flex-column py-3 px-5">
								<h6
									className="px-2 "
									style={{
										direction: language === "fa" ? "ltr" : "rtl",
									}}
								>
									{language === "fa" ? field.label : field.labelEN}
								</h6>
								<div className="d-flex ">
									<input
										type="checkbox"
										checked={field.required}
										onChange={() => handleChange()}
										className="form-check-input shadow-sm mx-2"
									/>
									<label htmlFor={field.name} className="form-label">
										{language === "fa"
											? "(الزامی / غیر الزامی)"
											: "Required / Not Required"}
									</label>
								</div>
								<div className="d-flex">
									<input
										type="checkbox"
										checked={field.enabled}
										onChange={() => handleChange()}
										className="form-check-input shadow-sm mx-2"
									/>
									<label htmlFor={field.name} className="form-label">
										{language === "fa"
											? "(فعال / غیر فعال)"
											: "Enabled / Not Enabled"}
									</label>
								</div>
							</div>
						);
					})}
				</div>
			</div>

			{/* Initial Evaluation Form */}
			<div
				className={`d-flex flex-column bg-white shadow text-${
					language === "fa" ? "end" : "start"
				} rounded-5 m-3 m-md-4 m-lg-5`}
			>
				<div className="d-flex justify-content-center align-items-center custom-bg-1 shadow rounded-5 mb-4 p-3">
					<h3 className="text-center text-white m-0">
						{language === "fa"
							? "فرم ارزیابی اولیه کاربر"
							: "Initial Evaluation Form"}
					</h3>
				</div>
				{Array.from(new Set(formFieldsIEData.map((field) => field.group))).map(
					(group, index) => {
						const sampleField = formFieldsIEData.find(
							(field) => field.group === group
						);
						return (
							sampleField &&
							sampleField.group && (
								<div key={index}>
									<h4 className="text-center pt-4">
										{language === "fa"
											? sampleField.group
											: sampleField.groupEN}
									</h4>
									<hr className=" rounded-pill mx-4 my-2" />
									<div
										className={`row row-cols-2 mt-4 mb-5`}
										style={{ direction: language === "fa" ? "rtl" : "ltr" }}
									>
										{formFieldsIEData
											.filter((field) => field.group === group)
											.map((field: formFieldsProps, index: number) => {
												if (field.type === "placeholder") return null;
												if (field.type === "checkmenu") return null;
												if (field.name === "age") return null;
												if (field.name === "") return null;
												return (
													<div key={index} className="col-6 py-3 px-5">
														<h6
															className="px-2 "
															style={{
																direction: language === "fa" ? "ltr" : "rtl",
															}}
														>
															{language === "fa" ? field.label : field.labelEN}
														</h6>
														<input
															type="checkbox"
															checked={field.required}
															onChange={() => handleChange()}
															className="form-check-input shadow-sm mx-2"
														/>
														<label htmlFor={field.name} className="form-label">
															{language === "fa"
																? "(الزامی / غیر الزامی)"
																: "Required / Not Required"}
														</label>
														<div className="d-flex">
															<input
																type="checkbox"
																checked={field.enabled}
																onChange={() => handleChange()}
																className="form-check-input shadow-sm mx-2"
															/>
															<label
																htmlFor={field.name}
																className="form-label"
															>
																{language === "fa"
																	? "(فعال / غیر فعال)"
																	: "Enabled / Not Enabled"}
															</label>
														</div>
													</div>
												);
											})}
									</div>
								</div>
							)
						);
					}
				)}
			</div>

			{/* Submit and Cancel buttons */}
			<div className="d-flex justify-content-evenly px-3 my-2 mx-4 py-2">
				<button
					className="btn btn-secondary rounded-pill px-3"
					onClick={handleCancel}
				>
					{language === "fa" ? "حذف تغییرات" : "Cancel Changes"}
				</button>
				<button
					className="btn btn-success rounded-pill px-3"
					onClick={handleSubmit}
				>
					{language === "fa" ? "ذخیره تغییرات" : "Save Changes"}
				</button>
			</div>
		</div>
	);
}

export default AdminDashboardFormPageContent;

i need you to make the handleChange function for me to handle the changes made to required and enabled based on the last input made by the user to them via the input elements;
if need be make two handleChanges for required and enabled each, but the results should be the same,
by which i mean that at the end, regardless of how, the data in changedData and changedDataIE should include the items in the payloadProps, meaning formFieldId (the specific id if the formField that was altered), required, and enabled;

so to recap, the handleChange(s) function(s) should be able to alter the data so that the correct visuals are in place,
meaning the user can correctly see the results of interacting with the inputs, and likewise the new inputs should then be correctly placed in the changedData and changedDataIE.

based on the information i have given you please make the necessary changes as instructed.
dont rewrite the entire code, just tell me what and where to make changes.