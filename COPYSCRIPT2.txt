given this code:
return (
		<div className="custom-bg-4 min-vh-100">
			<div className="container d-flex flex-column">
				<form
					onSubmit={handleTestSubmit}
					className="needs-validation my-5"
					noValidate
				>
					<div className="accordion" id="accordionExample">
						{Object.keys(formFields).map(
							(section, index) =>
								!(section === "id") &&
								!(userInfo?.gender === "مرد" && section === "بیماران خانم") && (
									<div
										className="accordion-item shadow-sm rounded-5 mb-5"
										key={index}
									>
										<div
											className="accordion-header border border-2 border-primary rounded-5 d-flex justify-content-end align-items-center p-2"
											id={`heading${index}`}
											style={{ direction: language === "fa" ? "ltr" : "rtl" }}
										>
											<h4 className="mb-0  mx-2 mx-md-3 mx-lg-4">
												{language === "fa"
													? section
													: sectionNameMap[
															section as keyof typeof sectionNameMap
													  ]}
											</h4>
											<img
												src="/images/plus-border.png"
												alt="+"
												className={`custom-btn img-fluid m-0 p-0 btn-toggle collapsed ${
													openIndexes.includes(index) ? "rotate" : ""
												}`}
												onClick={() => toggleForm(index)}
												data-bs-toggle="collapse"
												data-bs-target={`#collapse${index}`}
												itemType="button"
												aria-expanded={false}
												aria-controls={`collapse${index}`}
											/>
										</div>
										<div
											id={`collapse${index}`}
											className={`accordion-collapse collapse `}
										>
											<div
												className={`accordion-body text-${
													language === "fa" ? "end" : "start"
												} pt-0 mb-1`}
											>
												<div
													className="row d-flex align-items-start g-5 my-1"
													style={{
														direction: language === "fa" ? "rtl" : "ltr",
													}}
												>
													{Array.isArray(formFields[section]) &&
														formFields[section].map(
															(field: any, idx: number) => {
																if (field.type === "placeholder") {
																	return (
																		<h6 key={idx} className="col-6 mb-2">
																			{language === "fa"
																				? field.name
																				: field.nameEN}
																			{(language === "fa"
																				? field.name
																				: field.nameEN) && <hr />}
																		</h6>
																	); // Empty column for placeholder
																}
																const isSelect = field.type === "select";
																const isCheckbox = field.checkboxName;
																const isCheckMenu = field.type === "checkmenu";
																const isRadio = field.type === "radio";

																return (
																	<div
																		key={idx}
																		className="col-6 d-flex flex-column mb-2"
																		style={{
																			direction:
																				language === "fa" ? "ltr" : "rtl",
																		}}
																	>
																		<label
																			htmlFor={field.name}
																			className="form-label"
																		>
																			{language === "fa"
																				? field.label
																				: field.labelEN}
																		</label>
																		{isSelect ? (
																			<select
																				id={field.name}
																				name={field.name}
																				value={String(
																					formik.values[
																						field.name as keyof UserIEFormData
																					] || ""
																				)}
																				onChange={formik.handleChange}
																				onBlur={formik.handleBlur}
																				className={`form-select text-${
																					language === "fa" ? "end" : "start"
																				}
																				 shadow-sm select-resize ${
																						formik.touched[
																							field.name as keyof UserIEFormData
																						] &&
																						formik.errors[
																							field.name as keyof UserIEFormData
																						]
																							? "is-invalid"
																							: ""
																					}`}
																				required={field.required}
																				disabled={
																					!!formik.values[
																						field.checkboxName as keyof UserIEFormData
																					]
																				}
																			>
																				<option value="" disabled>
																					{field.placeholder || "..."}
																				</option>
																				{(language === "fa"
																					? field.options
																					: field.optionsEN
																				).map((option: string, i: number) => (
																					<option key={i} value={option}>
																						{option}
																					</option>
																				))}
																			</select>
																		) : isCheckMenu ? (
																			<div
																				className="d-flex flex-column checkmenu"
																				style={{
																					direction:
																						language === "fa" ? "rtl" : "ltr",
																				}}
																			>
																				{field.options.map(
																					(option: any, i: number) => (
																						<div
																							key={i}
																							className={`d-flex justify-content-start mt-2`}
																						>
																							<input
																								type="checkbox"
																								id={option.name}
																								name={option.name}
																								checked={
																									!!formik.values[
																										option.name as keyof UserIEFormData
																									] || false
																								}
																								onChange={() => {
																									formik.setFieldValue(
																										option.name,
																										!formik.values[
																											option.name as keyof UserIEFormData
																										] // Toggle the value
																									);
																								}}
																								onBlur={formik.handleBlur}
																								className={`form-check-input ${
																									formik.touched[
																										option.name as keyof UserIEFormData
																									] &&
																									formik.errors[
																										option.name as keyof UserIEFormData
																									]
																										? "is-invalid"
																										: ""
																								}`}
																							/>
																							<label
																								htmlFor={option.name}
																								className={`form-check-label ${
																									language === "fa"
																										? "me-3"
																										: "ms-3"
																								} `}
																							>
																								{language === "fa"
																									? option.label
																									: option.labelEN}
																							</label>
																						</div>
																					)
																				)}
																			</div>
																		) : isRadio ? (
																			field.options.map(
																				(option: any, i: number) => (
																					<div key={i} className="form-check">
																						<input
																							type="radio"
																							id={`${field.name}-${i}`}
																							name={field.name}
																							value={option.value}
																							checked={
																								formik.values[
																									field.name as keyof UserIEFormData
																								] === option.value
																							}
																							onChange={formik.handleChange}
																							onBlur={formik.handleBlur}
																							className={`form-check-input ${
																								formik.touched[
																									field.name as keyof UserIEFormData
																								] &&
																								formik.errors[
																									field.name as keyof UserIEFormData
																								]
																									? "is-invalid"
																									: ""
																							}`}
																						/>
																						<label
																							htmlFor={`${field.name}-${i}`}
																							className="form-check-label"
																						>
																							{option.label}
																						</label>
																					</div>
																				)
																			)
																		) : (
																			<input
																				type={field.type}
																				id={field.name}
																				name={field.name}
																				value={String(
																					formik.values[
																						field.name as keyof UserIEFormData
																					] || ""
																				)}
																				onChange={formik.handleChange}
																				onBlur={formik.handleBlur}
																				className={`form-control text-${
																					language === "fa" ? "end" : "start"
																				} shadow-sm ${
																					formik.touched[
																						field.name as keyof UserIEFormData
																					] &&
																					formik.errors[
																						field.name as keyof UserIEFormData
																					]
																						? "is-invalid"
																						: ""
																				}`}
																				required={field.required}
																				disabled={
																					!!formik.values[
																						field.checkboxName as keyof UserIEFormData
																					]
																				}
																				placeholder={
																					(language === "fa"
																						? field.placeholder
																						: field.placeholderEN) || ""
																				}
																			/>
																		)}
																		{isCheckbox && field.checkboxLabel && (
																			<div
																				className={`d-flex justify-content-end mt-2`}
																			>
																				<input
																					type="checkbox"
																					id={field.checkboxName}
																					name={field.checkboxName}
																					checked={
																						!!formik.values[
																							field.checkboxName as keyof UserIEFormData
																						] || false
																					}
																					onChange={(e) => {
																						formik.setFieldValue(
																							field.checkboxName,
																							e.target.checked
																						);

																						if (e.target.checked) {
																							formik.setFieldValue(
																								field.name,
																								""
																							);
																						}
																					}}
																					className="form-check-input shadow-sm"
																				/>
																				<label
																					htmlFor={field.checkboxName}
																					className={`form-check-label ${
																						language === "fa" ? "ms-3" : "me-3"
																					}`}
																				>
																					{language === "fa"
																						? field.checkboxLabel
																						: field.checkboxLabelEN}
																				</label>
																			</div>
																		)}
																		{formik.touched[
																			field.name as keyof UserIEFormData
																		] &&
																			formik.errors[
																				field.name as keyof UserIEFormData
																			] && (
																				<div className="invalid-feedback">
																					{String(
																						formik.errors[
																							field.name as keyof UserIEFormData
																						]
																					)}
																				</div>
																			)}
																	</div>
																);
															}
														)}
												</div>
											</div>
										</div>
									</div>
								)
						)}
					</div>
					<div className="d-flex justify-content-center mt-4 mt-md-5">
						<button
							type="submit"
							className="btn btn-primary rounded-pill fs-6 px-4 py-2"
						>
							{language === "fa" ? "ذخیره" : "Save"}
						</button>
					</div>
				</form>
			</div>
		</div>
	);

and this new data set that will be used:
interface formFieldsIEProps {
	name: string;
	type: string;
	required: string;

	group: string;
	groupEN: string;

	label: string;
	labelEN: string;

	placeholder: string;
	placeholderEN: string;

	options: string;
	optionsEN: string;

	checkboxName: string;
	checkboxLabel: string;
	checkboxLabelEN: string;
}

1. change this part of the code to fit the new data set:
<h4 className="mb-0  mx-2 mx-md-3 mx-lg-4">
												{language === "fa"
													? section
													: sectionNameMap[
															section as keyof typeof sectionNameMap
													  ]}
											</h4>
instead of the section and sectionEN it should be group and groupEN.

2.this part of the code must be updated to work with the new data set as well:

						{Object.keys(formFields).map(
							(section, index) =>
								!(userInfo?.gender === "مرد" && section === "بیماران خانم") && (
								
for context the part i showed you in (2.) was used to map the data within the sections which was the old data structure,
now the logic should differentiate items based on there group data and index accordinglly.

3. this part of the code:
{Array.isArray(formFields[section]) &&
														formFields[section].map(
															(field: any, idx: number) => {
must also be updated to work with the new data set; the logic used here was meant to access the data within the sections in the old data set (it had nesting),
but now each item has a group and the nesting has been removed, and so this parts logic should be altered accordingly.
